server-dispatcher {
  executor = "thread-pool-executor"
  type = PinnedDispatcher
}

akka.log-dead-letters-during-shutdown = false
akka.log-dead-letters = 0

colossus{

  iosystem {
    #If num-workers is omitted, it will default to the CPU core count on the host machine
    #num-workers : 4
  }

  server {
    name : "/"
    port : 9876
    max-connections : 1000
    slow-start {
      enabled = false
      initial = 20
      duration = 5 seconds
    }
    max-idle-time : "Inf"
    low-watermark-percentage : 0.75
    high-watermark-percentage : 0.85
    highwater-max-idle-time : "100 milliseconds"
    #tcp-backlog-size : 100  #optional
    binding-retry : {
      type : "backoff"
      multiplier : {
        type : "exponential"
        max : "1 second"
      }
      base : "100 milliseconds"
      immediate-first-attempt : false
    }
    delegator-creation-policy : {
      wait-time : "500 milliseconds"
      retry-policy : {
        type : "backoff"
        multiplier : {
          type : "constant"
        }
        base : "100 milliseconds"
        immediate-first-attempt : false
      }
    }
    shutdown-timeout : "100 milliseconds"
    #so-reuse-address : true
  }

  service {
    default {
      request-timeout : "Inf"
      request-buffer-size : 100
      log-errors : true
      request-metrics : true
      max-request-size : "10 MB"
    }
  }
  
  client {
    defaults {
      #address - 127.0.0.1:333 or myserver.on.the.web:5678 must be provided
      #name  - must be provided
      request-timeout : "1 second"
      pending-buffer-size : 100
      sent-buffer-size : 100
      fail-fast : false
      connect-retry-policy : {
        type : "backoff"
        multiplier : {
          type : "exponential"
          max : "5 seconds"
        }
        base : "50 milliseconds"
        immediate-first-attempt : true
      }
      idle-timeout : "Inf"
      max-response-size : "1 MB"
    }
    #user defined clients go here.
    #redis-client {
      #address : 127.0.0.1:6379
      #name : redis
      #fail-fast : true
    #}
  }

  metrics {
    worker-event-loops : {
      enabled : true
      prune-empty : false
    }
    worker-connections : {
      enabled : true
    }
    worker-rejected-connections : {
      enabled : true
      prune-empty : false
    }
    server-connections {
      enabled : true
    }
    server-refused-connections {
      enabled : true
      prune-empty : false
    }
    server-connects {
      enabled : true
      prune-empty : false
    }
    server-closed {
      enabled : true
      prune-empty : false
    }
    server-highwaters {
      enabled : true
      prune-empty : false
    }
    connection-handler-requests {
      enabled : true
      prune-empty : false
    }
    connection-handler-latency{
      enabled : true
      percentiles : [0.75, 0.9, 0.99, 0.999, 0.9999]
      sample-rate : 0.25
      prune-empty : false
    }
    connection-handler-errors{
      enabled : true
      prune-empty : false
    }
    connection-handler-requests-per-connection{
      enabled : true
      percentiles: [0.5, 0.75, 0.99]
      sample-rate : 0.50
      prune-empty : false
    }
    connection-handler-concurrent-requests {
      enabled : true
    }
    client-requests {
      enabled : true
      prune-empty : false
    }
    client-errors {
      enabled : true
      prune-empty : false
    }
    client-dropped-requests {
      enabled : true
      prune-empty : false
    }
    client-connection-failures{
      enabled : true
      prune-empty : false
    }
    client-disconnects {
      enabled : true
      prune-empty : false
    }
    client-latency {
      enabled : true
      percentiles : [0.75, 0.99]
      sample-rate : 0.10
      prune-empty : false
    }
    client-transit-time {
      enabled : true
      percentiles : [0.5]
      sample-rate : 0.02
      prune-empty : false
    }
    client-queue-time {
      enabled : true
      percentiles : [0.5]
      sample-rate : 0.02
      prune-empty : false
    }
  }
}
